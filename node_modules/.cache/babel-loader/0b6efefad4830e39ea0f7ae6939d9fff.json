{"ast":null,"code":"var _jsxFileName = \"D:\\\\posts\\\\posts\\\\src\\\\Components\\\\PostList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState } from 'react';\nimport Post from \"./post\";\nimport PostForm from \"./PostForm\";\nimport MySelect from \"../UI/selects/MySelect\";\nimport MyInput from \"../UI/inputs/MyInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostList = props => {\n  _s();\n\n  let [posts, setPosts] = useState([]);\n  let [selectedSort, SetSelectedSort] = useState('');\n  let [searchQuery, setSearchQuery] = useState('');\n  let sortedPosts = useMemo(() => {\n    if (selectedSort) {\n      return [...posts].sort((a, b) => a[selectedSort].localeCompare(b[selectedSort]));\n    }\n\n    return posts;\n  }, [selectedSort, posts]);\n  let sortedAndSearchedPosts = useMemo(() => {\n    return sortedPosts.filter(post => post.title.includes(searchQuery));\n  });\n\n  function createPost(newPost) {\n    setPosts([...posts, newPost]);\n  }\n\n  function deletePost(post) {\n    setPosts(posts.filter(p => p.id !== post.id));\n  }\n\n  function sortPosts(sort) {\n    SetSelectedSort(sort);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: props.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PostForm, {\n      create: createPost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      style: {\n        margin: '20px 0'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MyInput, {\n      value: searchQuery,\n      onChange: el => setSearchQuery(el.target.value),\n      placeholder: \"\\u041F\\u043E\\u0438\\u0441\\u043A\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MySelect, {\n      defaultValue: \"\\u0421\\u043E\\u0440\\u0442\\u0438\\u0440\\u043E\\u0432\\u043A\\u0430\",\n      value: selectedSort,\n      onChange: sortPosts,\n      options: [{\n        value: 'title',\n        name: 'Заголовок'\n      }, {\n        value: 'body',\n        name: 'Описание'\n      }]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), posts.length == 0 ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u041F\\u043E\\u0441\\u0442\\u043E\\u0432 \\u043D\\u0435\\u0442\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this) : sortedAndSearchedPosts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n      title: post.title,\n      description: post.body,\n      id: post.id,\n      deletePost: deletePost\n    }, post.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 52\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PostList, \"KIHT9u5pq4R0681wv7qAj4/VlRo=\");\n\n_c = PostList;\nexport default PostList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"sources":["D:/posts/posts/src/Components/PostList.jsx"],"names":["React","useMemo","useState","Post","PostForm","MySelect","MyInput","PostList","props","posts","setPosts","selectedSort","SetSelectedSort","searchQuery","setSearchQuery","sortedPosts","sort","a","b","localeCompare","sortedAndSearchedPosts","filter","post","title","includes","createPost","newPost","deletePost","p","id","sortPosts","margin","el","target","value","name","length","map","body","key"],"mappings":"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","sourcesContent":["import React, {useMemo, useState} from 'react';\r\nimport Post from \"./post\";\r\nimport PostForm from \"./PostForm\";\r\nimport MySelect from \"../UI/selects/MySelect\";\r\nimport MyInput from \"../UI/inputs/MyInput\";\r\n\r\nconst PostList = (props) => {\r\n    let [posts, setPosts] = useState([]);\r\n    let [selectedSort, SetSelectedSort] = useState('');\r\n    let [searchQuery, setSearchQuery] = useState('');\r\n\r\n\r\n\r\n\r\n    let sortedPosts = useMemo(() => {\r\n        if(selectedSort){\r\n            return [...posts].sort((a, b) => a[selectedSort].localeCompare(b[selectedSort]))\r\n        }\r\n        return posts;\r\n    }, [selectedSort, posts]);\r\n\r\n    let sortedAndSearchedPosts = useMemo(() => {\r\n        return sortedPosts.filter(post => post.title.includes(searchQuery));\r\n    })\r\n\r\n    function createPost(newPost){\r\n        setPosts([...posts, newPost]);\r\n    }\r\n    function deletePost(post){\r\n        setPosts(posts.filter(p => p.id !== post.id));\r\n    }\r\n\r\n    function sortPosts(sort){\r\n        SetSelectedSort(sort);\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>{props.title}</h1>\r\n            <PostForm create = {createPost}/>\r\n            <hr style={{margin: '20px 0'}}/>\r\n            <MyInput\r\n                value={searchQuery}\r\n                onChange={el => setSearchQuery(el.target.value)}\r\n                placeholder='Поиск'\r\n            />\r\n            <MySelect defaultValue='Сортировка'\r\n            value={selectedSort}\r\n            onChange={sortPosts}\r\n            options = {[{\r\n                value: 'title', name: 'Заголовок'\r\n            }, {\r\n                value: 'body', name: 'Описание'\r\n            }]}\r\n            />\r\n            {(posts.length == 0) ?\r\n                <h1>Постов нет</h1>\r\n                :\r\n                sortedAndSearchedPosts.map(post => <Post title={post.title} description={post.body} id={post.id} key={post.key} deletePost = {deletePost}/>)}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostList;"]},"metadata":{},"sourceType":"module"}